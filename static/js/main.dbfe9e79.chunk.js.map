{"version":3,"sources":["components/ImageCard.js","components/Header.js","App.js","index.js"],"names":["ImageCard","regular","urls","alt_description","likes","user","name","portfolio_url","medium","profile_image","Wrapper","Container","className","src","alt","UserWrapper","UserInfoWrapper","style","marginBottom","href","rel","target","width","height","borderRadius","styled","div","Header","clientID","process","App","useState","loading","setLoading","images","setImages","page","setPage","query","setQuery","newImages","setNewImages","mounted","useRef","fetchImages","a","urlPage","urlQuery","url","fetch","response","json","data","prevImages","results","console","log","useEffect","current","prevPage","event","window","innerHeight","scrollY","document","body","scrollHeight","addEventListener","removeEventListener","MainWrapper","SearchWrapper","SearchBarWrapper","IconButton","type","placeholder","value","onChange","e","onClick","preventDefault","ImageWrapper","ImageGridWrapper","map","image","index","textAlign","padding","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dbfe9e79.chunk.js","sourcesContent":["//styled components import\r\nimport styled from 'styled-components';\r\n\r\nconst ImageCard = ({\r\n    //Deconstructing from unsplash response\r\n    urls:{regular}, \r\n    alt_description,\r\n    likes,\r\n    user: {\r\n        name,\r\n        portfolio_url,\r\n        profile_image: { medium },\r\n    },\r\n}) => {\r\n    return (\r\n        <Wrapper>\r\n            <Container className='image'>\r\n                <img src={regular} alt={alt_description} />\r\n                <UserWrapper className='user-info'>\r\n                    <UserInfoWrapper>\r\n                        <h4 style={{marginBottom:'0.5rem'}} >{name}</h4>\r\n                        <p style={{marginBottom:'0'}} >{likes} likes</p>\r\n                    </UserInfoWrapper>\r\n                    <a href={portfolio_url} rel='noreferrer' target='_blank'>\r\n                        <img src={medium} alt={name} style={{width:'2.5rem', height:'2.5rem', borderRadius:'50%'}} />\r\n                    </a>\r\n                </UserWrapper>\r\n            </Container>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default ImageCard\r\n\r\n\r\n//Styled components\r\nconst Wrapper = styled.div`\r\n    display: inline-flex;\r\n    padding: 10px;\r\n`\r\n\r\nconst Container = styled.div`\r\n    ${'' /* display: flex;\r\n    align-items: center; */}\r\n    ${'' /* box-sizing: border-box; */}\r\n    width: 250px;\r\n    height: 17.5rem;\r\n    position: relative;\r\n    overflow: hidden;\r\n\r\n    img {\r\n        display: flex;\r\n        width: 100%;\r\n        height: 100%;\r\n        display: block;\r\n        object-fit: cover;\r\n        cursor: pointer;\r\n        border-radius: 16px;\r\n    }\r\n}\r\n`\r\nconst UserWrapper = styled.div`\r\n    a{\r\n        text-decoration: none;\r\n        font-weight: 700;\r\n    }\r\n`\r\n\r\nconst UserInfoWrapper = styled.div`\r\n\r\n`","export const Header = () => {\r\n    return (\r\n        <a href=\"https://github.com/rubiocode/MakeMyDay.v2\" rel='noreferrer' target='_blank'>\r\n            <div className='header'></div>\r\n        </a>\r\n        \r\n    )\r\n}\r\n\r\nexport default Header","import React, { useState, useEffect, useRef } from 'react';\n\n//Material UI components\nimport SearchIcon from '@material-ui/icons/Search';\nimport IconButton from '@material-ui/core/IconButton';\n\n//styled components import\nimport styled from 'styled-components';\n\n//Local Files\nimport ImageCard from './components/ImageCard';\nimport Header from './components/Header';\n\nimport './App.css';\n\n//after adding the process.env variable the terminal must be restarted for it to work!\nconst clientID = `?client_id=${process.env.REACT_APP_ACCESS_KEY}`;\nconst mainUrl = `https://api.unsplash.com/photos/`;\nconst searchUrl = `https://api.unsplash.com/search/photos/`;\n\nfunction App() {\n  //since we fetching data we need to set loading\n  const [loading, setLoading] = useState(false);\n\n  //setting up images\n  const [images, setImages] = useState([]);\n\n  //default page is 1 in unsplash, but now we can change the pages as we fetch images \n  const [page, setPage] = useState(1);\n\n  //setting up searched images query from search bar\n  const [query, setQuery] = useState('');\n\n  //new images from lazy loading\n  const [newImages, setNewImages] = useState(false);\n\n  const mounted = useRef(false);\n\n  //creating function to fetch images\n  const fetchImages = async () => {\n\n    setLoading(true)\n    //using let to store url because it will be changing whether default grid or search image\n    let url;\n    const urlPage = `&page=${page}`;\n    const urlQuery = `&query=${query}`;\n\n    //I want to use url if there is nothing in query but if there is something then we want what is being queried\n    if (query) {\n      url = `${searchUrl}${clientID}${urlPage}${urlQuery}`;\n    } else {\n      url = `${mainUrl}${clientID}${urlPage}`;\n    }\n\n\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      //console.log(data);\n\n      //we have already preloaded fetched images when app starts, \n      //we want the new images plus the old images to be added to the array with the spread operator\n      setImages((prevImages) => {\n        //if typing brand new query then wipe out old image results (no appending instead wiping out)\n        if (query && page === 1) {\n          return data.results;\n\n          //if query result unsplash api response sits in a diff array \n        //called results so need to get first response (data) plus 2nd response(results)\n        } else if (query) {\n          return [...prevImages, ...data.results];\n        } else {\n          return [...prevImages, ...data];\n        }\n      });\n\n      setNewImages(false);\n      setLoading(false);\n    } catch (e) {\n      //setting loading to false even if there is an error\n      setNewImages(false)\n      setLoading(false);\n      console.log(e);\n    }\n  };\n\n  //\n  useEffect(() => {\n    //running when the app loads\n    fetchImages();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page]);\n\n  useEffect(() => {\n    if (!mounted.current) {\n      //to run after the initial render\n      mounted.current = true;\n      return;\n    }\n    if (!newImages) return;\n    if (loading) return;\n    setPage((prevPage) => {\n      return prevPage + 1;\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [newImages]);\n\n  //manually setting up lazy loading\n  const event = () => {\n    //scroll in the browser for these logs to appear\n    // console.log(`innerHeight ${window.innerHeight}`);\n    // console.log(`scrollY ${window.scrollY}`);\n    // console.log(`body height ${document.body.scrollHeight}`);\n\n    //the higher the number the sooner the fetching of the images\n    if (\n      //bottom of the page as i'm scrolling we change state to true\n      window.innerHeight + window.scrollY >= document.body.scrollHeight - 2) {\n      // console.log('WORKING');\n      setNewImages(true);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('scroll', event);\n    return () => window.removeEventListener('scroll', event);\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // console.log('Is Working');\n\n    //if empty input cannot fetch images\n    if (!query) return;\n\n    //since state page is default 1 we want to instruct to fetch images\n    if (page === 1) {\n      fetchImages();\n    }\n\n    //set page to 1 so images do not get appended to old results upon new search\n    setPage(1);\n  }\n  return (\n    <MainWrapper>\n      <Header />\n      <Wrapper>\n        <SearchWrapper>\n          <SearchBarWrapper>\n            <IconButton>\n              <SearchIcon />\n            </IconButton>\n            <form>\n              <input \n              type='text' \n              placeholder='Search Image' \n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              />\n              <button type='submit' onClick={handleSubmit}></button>\n            </form>\n          </SearchBarWrapper>\n        </SearchWrapper>\n      </Wrapper>\n      <ImageWrapper>\n        <ImageGridWrapper>\n          {images.map((image, index) => {\n            /*console.log(image);*/\n            return <ImageCard key={index} {...image} />\n          })}\n        </ImageGridWrapper>\n        {/*Setting up lazy loading */}\n        {loading && <h2 style={{ textAlign: 'center', padding: '3rem' }}>Loading...</h2>}\n      </ImageWrapper>\n    </MainWrapper>\n  );\n}\n\nexport default App;\n\n//Style CSS \nconst MainWrapper = styled.div`\n\n`\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    height: 56px;\n    padding: 12px 4px 4px 16px;\n    background-color: #D3D0C9;\n    color: black;\n`\n\nconst SearchWrapper = styled.div`\n    flex: 1; /*takes up all the space it gets so it will stretch with screen sizing */\n`\n\nconst SearchBarWrapper = styled.div`\n    background-color: #efefef;\n    display: flex;\n    height: 48px;\n    width: 50%;\n    margin: 0 auto;\n    border-radius: 50px;\n    border: none;\n    padding-left: 10px;\n\n    form {\n        display: flex;\n        flex: 1;\n    }\n\n    form > input {\n        background-color: transparent;\n        border: none;\n        width: 100%;\n        margin-left: 5px;\n        font-size: 16px;\n    }\n\n    form > button {\n        display: none;\n    }\n\n/* When user types the textfield will not show any outline */\n    input:focus {\n        outline: none;\n    }\n`\n\nconst ImageWrapper = styled.div`\n    display: flex;\n    height: 100%;\n    justify-content: center;\n    margin-top: 15px;\n    width: 100%;\n  `\n\nconst ImageGridWrapper = styled.div`\n  background-color: #D3D0C9;\n  column-count: 4;\n  column-gap: 5px;\n  display: flex;\n  flex-wrap: wrap;\n  height: 100%;\n  justify-content: center;\n  margin: 0 auto;\n  max-width: 1800px\n\n`","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}